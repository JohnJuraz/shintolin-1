if character.hp > 0
  .gamebox.actionbox(style='opacity: .82')

    form(method='POST', action='/game/attack')
      input(type='hidden', name='_csrf', value=csrf)
      input(type='submit', value='Attack', data-action='attack')
      select(name='target', style='width: 10em', data-persist='target', data-action-focus='attack')
        option(value='') no-one
        for c in center.people
          option(value=c._id)= c.name
        for c in center.creatures
          if character.developer
            option(value=c._id) #{c.creature.name} #{c.hp}/#{c.hp_max}
          else
            option(value=c._id)= c.creature.name
        if center.building
          option(value='building')= center.building.name
      |  with 
      select(name='item', style='width: 10em', data-persist='weapon')
        for weapon in weapons
          option(value=weapon.id) #{weapon.name} (#{weapon.hit_chance * 100}%, #{weapon.damage} dmg)

    if usables.length
      form(method='POST', action='/game/use')
        input(type='hidden', name='_csrf', value=csrf)
        input(type='submit', value='Use', data-action='use')
        select(name='item', style='width: 10em', data-persist='usable-item', data-action-focus='use')
          for usable in usables
            option(value=usable.id)= usable.name
        |  on 
        select(name='target', style='width: 10em', data-persist='target')
          option(value='self') yourself
          for c in center.people
            option(value=c._id)= c.name

    if center.people.length || _.contains(actions, 'give')
      form(method='POST', action='/game/give')
        input(type='hidden', name='_csrf', value=csrf)
        input(type='submit', value='Give', data-action='give')
        - var max = _.max(_.pluck(character.items, 'count'));
        if max === 1
          input(type='hidden', name='quantity', value=1)
        else
          - var range = _.range(max);
          select(name='quantity')
            for i in range
              option(value=i + 1)= i + 1
        select(name='item', style='width: 10em', data-persist='item', data-action-focus='give')
          for item in character.items
            option(value=item.item)= data.items[item.item].name
        |  to 
        select(name='target', style='width: 10em', data-persist='target')
          if _.contains(actions, 'give')
            option(value='building')= center.building.name
          for c in center.people
            option(value=c._id)= c.name

    if _.contains(actions, 'take') && center.tile.items.length
      form(method='POST', action='/game/take')
        input(type='hidden', name='_csrf', value=csrf)
        input(type='submit', value='Take', data-action='take')
        - var max = _.max(_.pluck(center.tile.items, 'count'));
        if max === 1
          input(type='hidden', name='quantity', value=1)
        else
          - var range = _.range(max);
          select(name='quantity')
            for i in range
              option(value=i + 1)= i + 1
        select(name='item', style='width: 10em', data-persist='item', data-action-focus='take')
          for item in center.tile.items
            option(value=item.item)= data.items[item.item].name

    form(method='POST', action='/game/craft')
      input(type='hidden', name='_csrf', value=csrf)
      input(type='submit', value='Craft', data-action='craft')
      select(name='recipe', style='width: 10em', data-persist='recipe', data-action-focus='craft')
        for recipe in recipes
          option(value=recipe.id)= recipe.name
            |  (#{recipe.ap}ap
            if recipe.tools
              for item in recipe.tools
                | , #{data.items[item].name}
            for item in recipe.items
              | , #{item.count} x #{data.items[item.item].name}
            | )

    if center.tile.z === 0
      form(method='POST', action='/game/build')
        input(type='hidden', name='_csrf', value=csrf)
        input(type='submit', value='Build', data-action='build')
        select(name='building', style='width: 10em', data-persist='building', data-action-focus='build')
          for building in buildings
            option(value=building.id)= building.name
              |  (#{building.ap}ap
              for item in building.items
                | , #{item.count} x #{data.items[item.item].name}
              | )

    if settlement && _.contains(actions, 'promote') && settlement.leader && settlement.leader._id.toString() === character._id.toString()
      form(method='POST', action='/game/promote')
        input(type='hidden', name='_csrf', value=csrf)
        input(type='submit', value='Promote', data-action='promote')
        select(name='character', style='width: 10em', data-persist='member', data-action-focus='promote')
          option(value='') no-one
          for m in settlement.members
            if m.provisional
              option(value=m._id)= m.name

    if settlement && _.contains(actions, 'evict') && settlement.leader && settlement.leader._id.toString() === character._id.toString()
      form(method='POST', action='/game/evict')
        input(type='hidden', name='_csrf', value=csrf)
        input(type='submit', value='Evict', data-action='evict')
        select(name='character', style='width: 10em', data-persist='member', data-action-focus='evict')
          option(value='') no-one
          for m in evictables
            option(value=m._id)= m.name

    if settlement && character.settlement_id && settlement._id.toString() === character.settlement_id.toString()
      - var my_member_record = _.find(settlement.members, function(m){ return m._id.toString() === character._id.toString(); });
      - var candidates = settlement.members.filter(function(m){ return !m.provisional; });
      form(method='POST', action='/game/vote')
        input(type='hidden', name='_csrf', value=csrf)
        input(type='submit', value='Vote For', data-action='vote')
        select(name='character', style='width: 10em')
          option(value='') no-one
          for c in candidates
            if my_member_record.voting_for && my_member_record.voting_for._id.toString() === c._id.toString()
              option(value=c._id, selected='selected')= c.name
            else
              option(value=c._id)= c.name
      if my_member_record.voting_for
        | Current Vote: <a href='/profile/#{my_member_record.voting_for.slug}'>#{my_member_record.voting_for.name}</a>

    if center.tile.settlement_id && center.building && center.building.id === 'totem' && (!character.settlement_id || center.tile.settlement_id.toString() !== character.settlement_id.toString())
      form(method='POST', action='/game/join')
        input(type='hidden', name='_csrf', value=csrf)
        input(type='submit', value='Join Settlement (25ap)', data-action='join')

    form(method='POST', action='/game/search')
      input(type='hidden', name='_csrf', value=csrf)
      input(type='submit', value='Search', data-action='search')

    if _.contains(actions, 'chop')
      form(method='POST', action='/game/chop')
        input(type='hidden', name='_csrf', value=csrf)
        input(type='submit', value='Chop Tree', data-action='chop')

    if _.contains(actions, 'quarry')
      form(method='POST', action='/game/quarry')
        input(type='hidden', name='_csrf', value=csrf)
        input(type='submit', value='Quarry', data-action='quarry')

    if _.contains(actions, 'fill')
      form(method='POST', action='/game/fill-pot')
        input(type='hidden', name='_csrf', value=csrf)
        input(type='submit', value='Fill', data-action='fill')

    if _.contains(actions, 'dig')
      form(method='POST', action='/game/dig')
        input(type='hidden', name='_csrf', value=csrf)
        input(type='submit', value='Dig', data-action='dig')

    if _.contains(actions, 'sow')
      form(method='POST', action='/game/sow')
        input(type='hidden', name='_csrf', value=csrf)
        input(type='submit', value='Sow Field', data-action='sow')
        select(name='item', style='width: 10em', data-persist='plantable', data-action-focus='sow')
          for item in data.items
            if _.contains(item.tags || [], 'plantable')
              option(value=item.id)= item.name

    if _.contains(actions, 'water')
      form(method='POST', action='/game/water')
        input(type='hidden', name='_csrf', value=csrf)
        input(type='submit', value='Water Field', data-action='water')
        select(name='item', style='width: 10em', data-persist='water', data-action-focus='water')
          for citem in character.items
            - var item = data.items[citem.item];
            if _.contains(item.tags || [], 'water')
              option(value=item.id)= item.name

    if _.contains(actions, 'harvest')
      form(method='POST', action='/game/harvest')
        input(type='hidden', name='_csrf', value=csrf)
        input(type='submit', value='Harvest Field', data-action='harvest')
        select(name='item', style='width: 10em', data-persist='harvest', data-action-focus='harvest')
          for citem in character.items
            - var item = data.items[citem.item];
            if _.contains(item.tags || [], 'harvest')
              option(value=item.id)= item.name

    if repair
      form(method='POST', action='/game/repair')
        input(type='hidden', name='_csrf', value=csrf)
        input(type='submit', value=building.text && building.text.repair && building.text.repair.button ? building.text.repair.button : 'Repair', data-action='repair')
