div
  -var hasAction = false;

  if building && (building.hp || building.hp_max)
    - var building_hp_current = exterior ? exterior.hp || 0 : center.tile.hp || 0;
    - var building_hp_max = building.hp_max || building.hp || 0;
    - var pct = Math.floor(rounded(building_hp_current)/rounded(building_hp_max) * 100);
    - if (pct > 100) { pct = 100; }
    .progress.building-hp
      .progress-bar.progress-bar-danger(role='progressbar', aria-valuenow=rounded(building_hp_current), aria-valuemin='0', aria-valuemax=rounded(building_hp_max), style='width: #{pct}%;')
        .content
          strong #{(building.text || {}).hp || 'HP'}:
          |  #{building_hp_current}/#{building_hp_max}

  if center.tile.z === 1 && building && building.max_occupancy
    - var pct = Math.floor(center.tile.people.length/building.max_occupancy * 100);
    - if (pct > 100) { pct = 100; }
    .progress.building-occupancy
      .progress-bar(role='progressbar', aria-valuenow=center.tile.people.length, aria-valuemin='0', aria-valuemax=building.max_occupancy, style='width: #{pct}%;', class={'progress-bar-warning': (center.tile.people.length > building.max_occupancy), 'progress-bar-default': (center.tile.people.length <= building.max_occupancy)})
        .content
          if center.tile.people.length > building.max_occupancy
            strong Maximum Occupancy Exceeded
          else
            strong Maximum Occupancy: #{building.max_occupancy}

  if actions.build
    - hasAction = true;
    form.action(method='POST', action='/game/actions/build')
      input(type='hidden', name='_csrf', value=csrf)
      mixin action_button(actions.build.text.submit, 'Variable')
      select.form-control(name='building', style='width: 10em', data-persist='building', data-action-focus='build')
        for value, key in actions.build.buildings
          option(value=key)= value.label

  if repair
    - hasAction = true;
    form.action(method='POST', action='/game/repair')
      - var recipe = visit_recipe(data.buildings[center.tile.building], 'repair', character, center.tile);
      input(type='hidden', name='_csrf', value=csrf)
      input.btn.btn-default.btn-sm(type='submit', value=building.text && building.text.repair && building.text.repair.button ? building.text.repair.button : 'Repair' + (recipe && recipe.hp ? ' ' + recipe.hp + ' HP' : ''), data-action='repair', data-toggle='tooltip', data-placement='left', title='#{recipe && recipe.ap ? recipe.ap : "Variable"} AP')
      if recipe.tools
        each item, index in recipe.tools
          if index !== 0
            | , 
          | #{data.items[item].name}
      if recipe.items && recipe.items.length
        if recipe.tools
          |  
        each item, index in recipe.items
          if index !== 0
            | , 
          | #{item.count}x #{data.items[item.item].name}


  if actions.give && character.items.length
    - hasAction = true;
    form.action(method='POST', action='/game/give')
      input(type='hidden', name='_csrf', value=csrf)
      mixin action_button('Give')
      - var max = _.max(_.pluck(character.items, 'count'));
      if max === 1
        input(type='hidden', name='quantity', value=1)
      else
        - var range = _.range(max);
        select.form-control(name='quantity')
          for i in range
            option(value=i + 1)= i + 1
        |  
      select.form-control(name='item', style='width: 10em', data-persist='item', data-action-focus='give')
        for item in character.items
          option(value=item.item)= data.items[item.item].name
      input(type='hidden', name='target', value='building')

  if actions.take && center.tile.items.length
    form.action(method='POST', action='/game/take')
      input(type='hidden', name='_csrf', value=csrf)
      mixin action_button('Take')
      - var max = _.max(_.pluck(center.tile.items, 'count'));
      if max === 1
        input(type='hidden', name='quantity', value=1)
      else
        - var range = _.range(max);
        select.form-control(name='quantity')
          for i in range
            option(value=i + 1)= i + 1
        |  
      select.form-control(name='tile_item', style='width: 10em', data-persist='item', data-action-focus='take')
        for item in center.tile.items
          option(value=item.item)= data.items[item.item].name

  if actions.settlement_join
    - hasAction = true;
    form.confirmable.action(method='POST', action='/game/actions/settlement_join')
      input(type='hidden', name='_csrf', value=csrf)
      mixin action_button('Join Settlement', actions.settlement_join.ap)

  if actions.write
    - hasAction = true;
    form.confirmable.action(method='POST', action='/game/write')
      input(type='hidden', name='_csrf', value=csrf)
      mixin action_button('Write', 3)
      input.form-control(type='text', name='message', maxlength='32', value=center.tile.message)

  if !hasAction
    p.empty No building actions.
