#!/usr/bin/env node_modules/coffee-script/bin/coffee

db = require '../../db'
db.connect().then ->

  async = require 'async'
  fs = require 'fs'
  path = require 'path'
  Mongolian = require 'mongolian'
  config = require '../../config'
  commands = require '../../commands'
  queries = require '../../queries'
  data = require '../../data'
  db = require '../../db'

  character_names = ['Ecce']
  characters = {}
  map_template_path = path.join __dirname, "../../data/map-backups", (process.argv[2] ? 'bootstrap.tsv')
  tile_data = fs.readFileSync map_template_path, encoding: 'utf-8'
  tiles = tile_data.split('\n').slice(1).map (row) ->
    arr = row.split('\t')
    x: parseInt(arr[0])
    y: parseInt(arr[1])
    region: if arr[2] is 'no-region' then null else data.regions[arr[2]]
    terrain: data.terrains[arr[3]]
  move =
    Ecce: {x: 1, y: 0, z: 0}

  async.series [
    (cb) ->
      # DROP DATABASE!!!
      _db = new Mongolian config.mongo_uri
      _db.dropDatabase (err) ->
        return cb(err) if err?
        console.log "Database dropped."
        cb()
    (cb) ->
      # create database indexes
      db.ensure_indexes cb
    (cb) ->
      # create map
      async.forEachSeries tiles, (t, cb) ->
        return cb("invalid terrain") unless t.terrain?
        commands.create_tile {x: t.x, y: t.y, z: 0}, t.terrain.id, (if t.region then t.region.id else null), (err, tile) ->
          return cb(err) if err?
          console.log "Created #{tile.terrain} tile at #{tile.x},#{tile.y},#{tile.z}."
          cb()
      , cb
    (cb) ->
      # create default characters/accounts
      async.forEachSeries character_names, (name, cb) ->
        commands.create_character name, "#{name.toLowerCase()}@example.com", 'password', undefined, (err, c) ->
          return cb(err) if err?
          console.log "Created character #{c.name}."
          characters[c.name] = c
          cb()
      , (err) ->
        return cb(err) if err?
        query =
          name: character_names[0]
        update =
          $set:
            developer: true
        db.characters().updateOne query, update, cb
    (cb) ->
      # move characters to starting positions
      arr = []
      arr.push character: character, coords: coords for character, coords of move
      async.forEach arr, (a, cb) ->
        commands.teleport characters[a.character], characters[a.character], a.coords, (err) ->
          return cb(err) if err?
          console.log "Moved #{a.character} to #{a.coords.x},#{a.coords.y},#{a.coords.z}."
          cb()
      , cb
  ], (err) ->
    if err?
      console.log err
    else
      console.log 'Bootstrap complete.'
    process.exit()
